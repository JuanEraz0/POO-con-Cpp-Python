#include <iostream>
#include <opencv2/core.hpp>
#include <opencv2/highgui.hpp>
#include <opencv2/imgproc.hpp>
#include <opencv2/features2d.hpp>
#include <opencv2/opencv.hpp>
#include <opencv2/video/background_segm.hpp>
#include <vector>
#include<string.h>
// in Linux systems, the / in directories should be used instead \ 

using namespace cv;
using namespace std;

// Declaración de variables globales
Mat originalImage, figMaskMOG2, grayImage, eyelash, or2, edges, mirrored;
int thresh = 140, maxVal = 255;
int type = 1, value = 8;

// Prototipo de la función track
void track(int, void*);

int main() {
    // Crear el objeto para la sustracción de fondo
    Ptr<BackgroundSubtractor> pMOG2 = createBackgroundSubtractorMOG2();
    cv::Rect myRoi(288, 12, 288, 288);  // Área de interés para el seguimiento

    // Inicializar la captura de video
    VideoCapture cap;
    cap.open(0);  // Abrir la cámara

    // Verificar si la cámara se abrió correctamente
    if (!cap.isOpened()) {
        cout << "Error: No se puede acceder a la cámara." << endl;
        return -1;
    }

    // Bucle principal
    while (1) {
        cap >> originalImage;  // Captura el frame actual
        if (originalImage.empty()) break;  // Verificar si se capturó correctamente

        // Espejar la imagen horizontalmente
        cv::flip(originalImage, mirrored, 1);

        // Dibujar el rectángulo sobre la región de interés
        cv::rectangle(mirrored, myRoi, cv::Scalar(0, 0, 255));

        // Extraer la región de interés (ROI)
        eyelash = mirrored(myRoi);

        // Convertir la imagen a escala de grises
        cvtColor(eyelash, grayImage, COLOR_RGB2GRAY);

        // Aplicar un filtro de desenfoque
        GaussianBlur(grayImage, grayImage, Size(23, 23), 0);

        // Crear ventana de controles
        namedWindow("set", WINDOW_AUTOSIZE);
        createTrackbar("Threshold", "set", &thresh, 250, track);
        createTrackbar("Maximum", "set", &maxVal, 255, track);
        createTrackbar("Threshold Type", "set", &type, 4, track);
        createTrackbar("Edges", "set", &value, 100, track);

        // Sustracción de fondo
        pMOG2->apply(eyelash, figMaskMOG2);
        cv::rectangle(figMaskMOG2, myRoi, cv::Scalar(0, 0, 255));

        // Llamar a la función track
        track(0, 0);

        // Mostrar las imágenes resultantes
        imshow("Original Image", mirrored);
        imshow("Background Removed", figMaskMOG2);
        imshow("Grey", grayImage);

        // Verificar si se presiona la tecla ESC para salir
        char key = waitKey(24);
        if (key == 27) break;
    }

    return 0;
}

// Función de seguimiento de la mano
void track(int, void*) {
    int count = 0;
    char a[40];

    // Variables para los contornos y jerarquía
    vector<vector<Point>> contours;
    vector<Vec4i> hierarchy;

    // Desenfoque y umbral
    GaussianBlur(figMaskMOG2, figMaskMOG2, Size(27, 27), 3.5, 3.5);
    threshold(figMaskMOG2, figMaskMOG2, thresh, maxVal, type);
    Canny(figMaskMOG2, edges, value, value * 2, 3);

    // Encontrar contornos
    findContours(figMaskMOG2, contours, hierarchy, RETR_TREE, CHAIN_APPROX_SIMPLE, Point(0, 0));

    // Crear imagen para dibujar los contornos
    Mat drawing = Mat::zeros(edges.size(), CV_8UC3);

    if (contours.size() > 0) {
        size_t indexOfBiggestContour = -1;
        size_t sizeOfBiggestContour = 0;

        // Buscar el contorno más grande
        for (size_t i = 0; i < contours.size(); i++) {
            if (contours[i].size() > sizeOfBiggestContour) {
                sizeOfBiggestContour = contours[i].size();
                indexOfBiggestContour = i;
            }
        }

        // Variables para los defectos de convexidad
        vector<vector<int>> hull(contours.size());
        vector<vector<Point>> hullPoint(contours.size());
        vector<vector<Vec4i>> defects(contours.size());
        vector<vector<Point>> defectPoint(contours.size());
        vector<vector<Point>> contours_poly(contours.size());
        Point2f rect_point[4];
        vector<RotatedRect> minRect(contours.size());
        vector<Rect> boundRect(contours.size());

        // Procesar los contornos
        for (size_t i = 0; i < contours.size(); i++) {
            if (contourArea(contours[i]) > 5000) {
                convexHull(contours[i], hull[i], true);
                convexityDefects(contours[i], hull[i], defects[i]);

                if (indexOfBiggestContour == i) {
                    minRect[i] = minAreaRect(contours[i]);

                    // Dibujar los puntos de la convexidad
                    for (size_t k = 0; k < hull[i].size(); k++) {
                        int ind = hull[i][k];
                        hullPoint[i].push_back(contours[i][ind]);
                    }

                    // Procesar los defectos de convexidad
                    size_t count =0;
                    for (size_t k = 0; k < defects[i].size(); k++, count++) {
                        if (defects[i][k][3] > 13 * 256) {
                            int p_start = defects[i][k][0];
                            int p_end = defects[i][k][1];
                            int p_far = defects[i][k][2];
                            defectPoint[i].push_back(contours[i][p_far]);
                            circle(grayImage, contours[i][p_end], 3, Scalar(0, 255, 0), 2);
                        }
                    }

                    // Mostrar el número de dedos
                    string a;
                    if (count == 1) a = "1";
                    else if (count == 2) a = "2";
                    else if (count == 3) a = "3";
                    else if (count == 4) a = "4";
                    else if (count == 5 || count == 6) a = "5";
                    else a = "SHOW HAND";


                    putText(mirrored, a, Point(75, 450), FONT_HERSHEY_SIMPLEX, 3, Scalar(0, 255, 0), 3, 8, false);

                    // Dibujar los contornos
                    drawContours(drawing, contours, i, Scalar(255, 255, 0), 2, 8, vector<Vec4i>(), 0, Point());
                    drawContours(drawing, hullPoint, i, Scalar(255, 255, 0), 1, 8, vector<Vec4i>(), 0, Point());
                    drawContours(grayImage, hullPoint, i, Scalar(0, 0, 255), 2, 8, vector<Vec4i>(), 0, Point());

                    // Dibujar el rectángulo mínimo
                    approxPolyDP(contours[i], contours_poly[i], 3, false);
                    boundRect[i] = boundingRect(contours_poly[i]);
                    rectangle(grayImage, boundRect[i].tl(), boundRect[i].br(), Scalar(255, 0, 0), 2, 8, 0);

                    // Dibujar el rectángulo rotado
                    minRect[i].points(rect_point);
                    for (size_t k = 0; k < 4; k++) {
                        line(grayImage, rect_point[k], rect_point[(k + 1) % 4], Scalar(0, 255, 0), 2, 8);
                    }
                }
            }
        }

        // Mostrar los contornos procesados
        imshow("Conclusion", drawing);
    }
}
